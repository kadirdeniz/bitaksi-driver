// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock is a generated GoMock package.
package mock

import (
	internal "driver/internal"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIRepository is a mock of IRepository interface.
type MockIRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIRepositoryMockRecorder
}

// MockIRepositoryMockRecorder is the mock recorder for MockIRepository.
type MockIRepositoryMockRecorder struct {
	mock *MockIRepository
}

// NewMockIRepository creates a new mock instance.
func NewMockIRepository(ctrl *gomock.Controller) *MockIRepository {
	mock := &MockIRepository{ctrl: ctrl}
	mock.recorder = &MockIRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRepository) EXPECT() *MockIRepositoryMockRecorder {
	return m.recorder
}

// BulkCreateDrivers mocks base method.
func (m *MockIRepository) BulkCreateDrivers(locations []internal.Model) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkCreateDrivers", locations)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkCreateDrivers indicates an expected call of BulkCreateDrivers.
func (mr *MockIRepositoryMockRecorder) BulkCreateDrivers(locations interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkCreateDrivers", reflect.TypeOf((*MockIRepository)(nil).BulkCreateDrivers), locations)
}

// FindNearestDriver mocks base method.
func (m *MockIRepository) FindNearestDriver(location internal.Coordinates) (internal.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindNearestDriver", location)
	ret0, _ := ret[0].(internal.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindNearestDriver indicates an expected call of FindNearestDriver.
func (mr *MockIRepositoryMockRecorder) FindNearestDriver(location interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindNearestDriver", reflect.TypeOf((*MockIRepository)(nil).FindNearestDriver), location)
}

// Migration mocks base method.
func (m *MockIRepository) Migration() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Migration")
	ret0, _ := ret[0].(error)
	return ret0
}

// Migration indicates an expected call of Migration.
func (mr *MockIRepositoryMockRecorder) Migration() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Migration", reflect.TypeOf((*MockIRepository)(nil).Migration))
}
